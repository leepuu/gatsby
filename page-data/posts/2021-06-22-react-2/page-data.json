{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2021-06-22-react-2/","result":{"data":{"markdownRemark":{"html":"<h1>1. JSX(JavaScript XML) 란?</h1>\n<p><strong>JavaScript를 확장한 문법</strong>으로 XML과 매우 닮았다.<br>\n편하게 HTML과 JavaScript를 합쳤다고 생각하면된다.<br>\n말하자면 자바스크립트 내부에 마크업을 할 수 있다는거다!!!</p>\n<p>굳이 JSX 문법을 쓰는 이유는 아래 예시를 보면 된다.</p>\n<h4>JSX</h4>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">function App() {\n  return (\n    &lt;div&gt;\n      Hello &lt;b&gt;Pureum&lt;/b&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<br>\n<h4>일반 자바스크립트</h4>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">function App() {\n  return React.createElement(&quot;div&quot;, null, &quot;Hello &quot;, React.createElement(&quot;b&quot;, null, &quot;Pureum&quot;))\n}</code>\n        </deckgo-highlight-code>\n<br>\n<p>JSX 문법은 브라우저가 실행되면 바벨을 사용하여 일반 자바스크립트 문법으로 변환되는데 살펴보면 매우 복잡하다는걸 알 수 있다.<br>\n일일히 계속 createElement 써준다고 생각해봐라.. 노가다...ㅎ</p>\n<p>그래서 React를 사용할 땐 JSX가 필수는 아니겠지만 협업이나 시각적으로나 더 좋을 거라고 생각된다.</p>\n<p><br><br><br></p>\n<h1>2. 장점</h1>\n<h2>1. 보기 쉽고 익숙하다.</h2>\n<p>위 예시처럼 일반 자바스크립트와 비교하여 가독성이 높고 작성하기 쉽다.<br>\n또한 친숙한 구문을 사용하기 때문에 익숙하다. (ex. html코드와 JS코드)</p>\n<br>\n<h2>2. 활용도가 높다.</h2>\n<p>우리가 알고있는 HTMl태그를 사용할 수 있는 뿐더러, Component도 작성할 수 있기때문에<br>\n하나로 여러가지를 사용할 수 있다.</p>\n<p><br><br><br></p>\n<h1>3. 문법</h1>\n<h2>1. 하나의 엘리먼트로 꼭 감싸야한다.</h2>\n<p>컴포넌트안에 두개 이상의 요소가 있다면 <strong>반드시 부모 요소 하나</strong>로 감싸야한다. (ex. <code>&#x3C;F></code>)</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\n// Bad\nfunction App(){\n  return (\n  &lt;h1&gt;리&lt;/h1&gt;\n  &lt;h2&gt;액&lt;/h2&gt;\n  &lt;h3&gt;트&lt;/h3&gt;\n  )\n}\n\n//Good\nfunction App(){\n  return (\n  &lt;div&gt;\n    &lt;h1&gt;리&lt;/h1&gt;\n    &lt;h2&gt;액&lt;/h2&gt;\n    &lt;h3&gt;트&lt;/h3&gt;\n  &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<br>\n<p>리액트16 이상 부턴 <code>Fragment</code> 라는 기능을 사용하면 된다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { Fragment } from &quot;react&quot;\n\nfunction App() {\n  return (\n    &lt;Fragment&gt;\n      &lt;h1&gt;리&lt;/h1&gt;\n      &lt;h2&gt;액&lt;/h2&gt;\n      &lt;h3&gt;트&lt;/h3&gt;\n    &lt;/Fragment&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<br>\n<p>더 간단하게는 아래 처럼 표현이 가능하다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;리&lt;/h1&gt;\n      &lt;h2&gt;액&lt;/h2&gt;\n      &lt;h3&gt;트&lt;/h3&gt;\n    &lt;/&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>2. 자바스크립트 표현</h2>\n<p>자바스크립트를 사용하려면 <code>{}</code> 로 감싸야한다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  const name = &quot;pureum&quot;\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{name}&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>3. 조건문 표현</h2>\n<p>JSX안에서는 if문 구문을 사용하지 못한다.<br>\n그러므로 JSX밖에서 if문 사용하여 사전에 값을 설정하거나 <code>{}</code>안에 <strong>조건문 연산자</strong>를 사용한다.<br>\n<strong>switch문은 작성해도 된다.</strong></p>\n<h4>삼항연산자</h4>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  const name = &quot;pureum&quot;\n  return &lt;div&gt;{name == &quot;pureum&quot; ? &lt;h1&gt;맞습니다.&lt;/h1&gt; : &lt;h1&gt;아닙니다.&lt;/h1&gt;}&lt;/div&gt;\n}</code>\n        </deckgo-highlight-code>\n<h4>AND 연산자(&#x26;&#x26;)</h4>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  const name = &quot;pureum&quot;\n  return &lt;div&gt;{name == &quot;pureum&quot; &amp;&amp; &lt;h1&gt;맞습니다.&lt;/h1&gt;}&lt;/div&gt;\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>4. 인라인 스타일링</h2>\n<p>리액트에서 스타일 적용할 때는 문자열이 아닌 <strong>객체</strong> 형태로,<br>\n스타일 이름은 <strong>카멜 표기법</strong>으로 작성해야한다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\nfunction App(){\n  const name = &#39;pureum&#39;;\n  const style = {\n    backgroundColor: &#39;black&#39;,\n    fontSize: &#39;15px&#39;\n  };\n\n  return (\n  &lt;div&gt;\n    &lt;h1 style={style}&gt;{name}&lt;h1&gt;\n  &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>5. 꼭 닫아야하는 태그</h2>\n<p>HTML 코드를 작성 할 때에는 <code>&#x3C;input></code>과 같은 태그들은 꼭 닫지 않아도 되었는데,<br>\n리액트에선 꼭꼮꼭 닫아줘야한다!!</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;input type=&quot;text&quot; /&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>6. 주석</h2>\n<p>주석은 <code>{/* */}</code>같은 형식으로 닫아주어야 한다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  return &lt;div&gt;{/* &lt;input /&gt; */}&lt;/div&gt;\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>7. className과 htmlFor</h2>\n<p>일반 HTML의 <code>&#x3C;div class></code>와 <code>&#x3C;input for></code>같은 경우는 기존 자바스크립트의 for문과 class와 헷갈릴 수 있으므로,<br>\nclass -> <code>className</code>, for -> <code>htmlFor</code> 으로 바꿔 써야한다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\n\nfunction App() {\n  return (\n    &lt;div className=&quot;wrap&quot;&gt;\n      &lt;input htmlfor=&quot;name&quot; /&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br><br></p>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li>&#x3C;리액트를 다루는 기술 - 길벗></li>\n</ul>","frontmatter":{"title":"React.js - JSX 이해하기","date":"2021-06-22","image":"react"},"id":"0ce4b59b-e96c-5db9-abd5-2918f3caae8c"}},"pageContext":{"slug":"/posts/2021-06-22-react-2/"}},"staticQueryHashes":["1707471100","3159585216","35752167"]}