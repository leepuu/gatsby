{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2019-12-09-object-2/","result":{"data":{"markdownRemark":{"html":"<h1>1. 객체(Object)의 구성</h1>\n<h2>Built-in Object(자바스크립트 내장객체)</h2>\n<p>자바스크립트 엔진이 구동되는 시점에서 바로 제공되며 자바스크립트 코드 어디에서든 사용할 수 있다.<br>\n문자(String), 날짜(Date), 배열(Array), 수학(Math) 등이 있다.\n<br><br></p>\n<h2>Native Object(브라우저 내장객체)</h2>\n<p>Native Object 역시 자바스크립트가 구동되는 시점에서 바로 사용이 가능한 객체들이지만<br>\n자바스크립트 엔진이 구성하는 기본 객체라고 하기 보단<br>\n브라우저 혹은 사용되는 자바스크립트 엔진에 영향을 많이 받게된다.<br>\n<strong>브라우저 객체모델(BOM)과 문서객체모델(DOM)</strong> 들이 여기에 속하는데,\nBuilt-in object 가 구성된 후에 구성된다.<br>\n이들은 <strong>브라우저마다 이 Native Object를 사용함에 있어서 그 구성을 달리하는 경우가 있다.</strong><br><br></p>\n<h2>Host Object(사용자 정의 객체)</h2>\n<p>말 그대로 사용자가 생성한 객체들이다.<br>\n사용자가 객체를 정의하고 확장시켰기 때문에 Built-in Object와 Native Object가 구성된 이후에 구성된다.</p>\n<p><br><br><br></p>\n<h1>2. 객체(Object) 생성</h1>\n<p>객체를 생성하는 방법은 크게 3가지로 나누어진다.<br>\n리터럴 표기(literal notation)를 이용한 방법, 생성자 함수(constructor function)를 이용한 방법, Object.create() 메소드를 이용한 방법 으로 이루어져있다.</p>\n<br>\n<h2>리터럴 표기를 이용한 객체의 생성</h2>\n<p>각각의 프로퍼티는 이름과 값을 콜론( <strong>:</strong> )으로 연결하고, 쉼표( <strong>,</strong> )를 사용해 다른 프로퍼티와 구분한다.</p>\n<h4>문법</h4>\n<pre><code class=\"language-javascript\">var 객체이름 = {\n  프로퍼티1 이름 : 프로퍼티1 의 값,\n  프로퍼티2 이름 : 프로퍼티2 의 값,\n  ...\n};\n</code></pre>\n<pre><code class=\"language-javascript\">var pureum = {\n  name : puu,\n  gender : female,\n  family : human,\n  ...\n};\n\ndocement.write(\"내 이름은\" + pureum.name + \"이고, 성별은 \" + pureum.gender + \" 그리고 \" + pureum.family);\n// -> 내 이름은 puu이고, 성별은 female 그리고 human\n</code></pre>\n<p><br><br></p>\n<h2>생성자를 이용한 객체의 생성</h2>\n<p><strong>new 연산자</strong>를 사용하여 객체를 생성하고 초기화할 수 있다.<br>\n이때 사용되는 메소드를 생성자(constructor)라고 하며, 이 메소드는 새롭게 생성되는 객체를 초기화하는 역할을 한다.</p>\n<pre><code class=\"language-javascript\">var day = new Date() //new 연산자를 사용하여 Date 타입의 객체를 생성\n\ndocument.write(\"올해는 \" + day.getFullYear() + \"년 입니다.\") // -> 올해는 2019년 입니다.\n</code></pre>\n<p><br><br></p>\n<h2>Object.create() 메소드를 이용한 객체의 생성</h2>\n<p>object.create() 메소드는 지정된 프로토타입 객체와 프로터피를 가지고 새로운 객체를 만들어 준다.<br>\n첫 번째 인수로는 프로토타입으로 사용할 객체를 전달하고, 두번째부터는 새로운 객체의 추가할 프로퍼티 정보를 전달한다.</p>\n<h4>문법</h4>\n<pre><code class=\"language-javascript\">Object.create(프로토타입객체[,새로운 객테의 프로퍼티1, 새로운 객테의 프로퍼티2,...]);\n</code></pre>\n<pre><code class=\"language-javascript\">var obj = Object.create(null, {\n    // null 프로토타입을 사용하여 새로운 객체를 만들고\n    x: { value: 100, enumerable: true }, // x좌표를 나타내는 열거할 수 있는 속성과\n    y: { value: 200, enumerable: true }, // y좌표를 나타내는 열거할 수 있는 속성을 추가함.\n})\n\ndocument.write(obj.x + \"&#x3C;br/>\") // x좌표 -> 100\ndocument.write(obj.y + \"&#x3C;br/>\") // y좌표 -> 200\ndocument.write(Object.getPrototypeOf(obj)) // 객체의 프로토타입을 반환해 줌. -> null\n</code></pre>\n<p><br><br><br><br><br></p>\n<blockquote>\n<p><subtitle> refernece</p>\n</blockquote>\n<ul>\n<li><a href=\"http://tcpschool.com/javascript\">http://tcpschool.com/javascript</a></li>\n<li><a href=\"http://insanehong.kr/post/javascript-object/\">http://insanehong.kr/post/javascript-object/</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 - 객체(Object)의 개념 및 생성","date":"2019-12-09"},"id":"d0aef2c6-0d62-55a8-b54a-187d178768ec"}},"pageContext":{"slug":"/posts/2019-12-09-object-2/"}}}