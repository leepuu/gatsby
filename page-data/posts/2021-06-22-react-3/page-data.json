{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2021-06-22-react-3/","result":{"data":{"markdownRemark":{"html":"<h1>1. 컴포넌트(Component) 란?</h1>\n<p><img src=\"/posts/react/react-3/component-1.png\" alt=\"사전\"></p>\n<p>사전에 정의된 말 그대로 구성요소로써, 컴포넌트라는 <strong>작고 고립된 코드들이 모여 리액트라는 UI 앱을 구성</strong>한다.<br>\n즉, 레고의 한 부분이 컴포넌트이고 이것을 조립하면 하나의 작품이 나온다.</p>\n<p>컴포넌트는 최소한의 단위로 <strong>재사용이 가능하며 독립적</strong>이다.  </p>\n<p>리액트에서 컴포넌트는 꼭 <strong>대문자로 시작</strong>하는 이름을 지어주어야 하며,<br>\n사용하는 컴포넌트는 함수형 컴포넌트와 클래스형 컴포넌트로 나뉜다.</p>\n<p><br><br><br></p>\n<h1>2. 클래스형 컴포넌트 (Class Component)</h1>\n<p>예전 리액트에서 많이 사용한 컴포넌트로 최근에는 많이 쓰이고 있지않지만,<br>\n기존 작업한 React에는 클래스형 컴포넌트가 많이 쓰이고 있어 알아둬야한다.  </p>\n<p>class를 사용하여 React Component로 부터 확장되고 screen에 출력하는 방식으로,<br>\nstate 기능 및 LifeCycle API를 사용할 수 있으며, 임의 메서드도 정의 가능하다.<br>\n클래스형 컴포넌트에서는 <code>render</code> 메서드가 꼭 필요하다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { Component } from &quot;react&quot;;\n\nclass App extends Component {\n  render() {\n    return (&lt;div&gt;클래스형 컴포넌트&lt;/div&gt;)\n  }\n}\n\nexport default App;</code>\n        </deckgo-highlight-code>\n<p><br><br><br></p>\n<h1>3. 함수형 컴포넌트 (Function Component)</h1>\n<p>function을 사용하여 return하며 screen에 출력하는 방식으로,<br>\n클래스형 컴포넌트보다 선언하기 편하며 메모리자원도 적다.</p>\n<p>원래는 클래스형 컴포넌트에서 쓰인 state기능과 LifeCycle API를 사용하지 못하였는데,<br>\n리액트 16부터는 Hooks라는 기능이 도입되면서 사용할 수 있게 되었다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;;\n\nfunction App() {\n  return (&lt;div&gt;함수형 컴포넌트&lt;/div&gt;)\n}\n\nexport default App;</code>\n        </deckgo-highlight-code>\n<p><br><br><br></p>\n<h1>4. props</h1>\n<p>propserties를 줄인 표현으로 <strong>부모 컴포넌트에게서 받는 데이터</strong>를 말한다.\n자식 컴포넌트에서는 데이터 변경이 불가능하며 읽기만 가능하다.  </p>\n<p>주로 외부에서 컴포넌트를 사용하기 위한 <strong>정적 데이터</strong>라고 생각하면 됨</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\nfunction App() {\n  return(\n    &lt;div&gt;\n      &lt;Modal title=&quot;React&quot; /&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction Modal(props){\n  return(\n    &lt;div&gt;\n      &lt;h1&gt;{props.title}입니다.&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><strong>App 컴포넌트는 Modal의 부모 컴포넌트</strong>로 title값을 props로 넘겨주어 Screen에는 \"React입니다.\" 라고 출력<br>\n하지만 만약 아래 상황처럼 title값을 지정하지 않는다면 \"입니다.\"만 출력되기 때문에 지정하지 않았을 때 보여줄 기본값을 설정해줄 수 있다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\nfunction App() {\n  return(\n    &lt;div&gt;\n      &lt;Modal /&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction Modal(props){\n  return(\n    &lt;div&gt;\n      &lt;h1&gt;{props.title}입니다.&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<h3>defaultProps</h3>\n<p>그건 바로 defaultProps <strong>컴포넌트 이름.defaultProps</strong>를 사용하면 기본 값을 설정할 수 있다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\nfunction App() {\n  return(\n    &lt;div&gt;\n      &lt;Modal /&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction Modal(props){\n  return(\n    &lt;div&gt;\n      &lt;h1&gt;{props.title}입니다.&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}\n\nModal.defaultProps = {\n  title:&#39;기본 제목&#39;\n}</code>\n        </deckgo-highlight-code>\n<h3>children</h3>\n<p>컴포넌트 <strong>태그 사이의 내용</strong>을 보여주는 props로, 태그 안에 내용을 가지고 올 때 유용하다.\n아래 예시와 같이 한다면 화면에는 \"React입니다. 할일은 공부입니다.\" 라고 출력된다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\nfunction App() {\n  return(\n    &lt;div&gt;\n      &lt;Modal title=&quot;React&quot;&gt;공부&lt;/Modal&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction Modal(props)\n  return(\n    &lt;div&gt;\n      &lt;h1&gt;{props.title}입니다.&lt;/h1&gt;\n      &lt;p&gt;할일은 {props.children} 입니다.&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<h3>비구조화 할당</h3>\n<p>자식 컴포넌트에서 props.값을 조회할 때 마다 props.name, props.children과 같이 props.를 앞에 붙이는데 이러한 작업을 편하기하기 위해 <strong>ES6문법인 비구조화 할당 문법</strong>을 사용하면 바로 추출가능하다.  </p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\n\nfunction App() {\n  return(\n    &lt;div&gt;\n      &lt;Modal /&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction Modal({title, children}){\n  return(\n    &lt;div&gt;\n      &lt;h1&gt;{title}입니다.&lt;/h1&gt;\n      &lt;p&gt;할일은 {children} 입니다.&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<h3>클래스형 컴포넌트 props</h3>\n<p>클래스형 컴포넌트에서 props를 사용하려면 <code>render</code> 함수에서 <code>this.props</code>를 조회하면 된다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { Component } from &#39;react;\n\nclass Modal extends Component {\n  render(){\n    const {title, children} = this.props;\n    return(\n      &lt;div&gt;\n        &lt;h1&gt;{**title**}입니다.&lt;/h1&gt;\n        &lt;p&gt;할일은 **{children}** 입니다.&lt;/p&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code>\n        </deckgo-highlight-code>\n<p><br><br><br></p>\n<h1>5. state</h1>\n<p>props와 달리 state는 <strong>컴포넌트 내에서 선언하는 데이터</strong>로, 언제든 내부에서 바뀔 수 있는 값이다.<br>\n내부에서 컴포넌트를 구현하기 위한 <strong>동적 데이터</strong></p>\n<h3>클래스형의 state</h3>\n<h6>선언 방식</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">state = {fruit: &#39;apple&#39;, price: &#39;10000&#39;}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>클래스형의 state는 객체 형식</li>\n</ul>\n<h6>Example</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">class Fruit extends Component {\n  state = {\n    fruit: &#39;apple&#39;\n  };\n\n  render(){\n    return(\n      &lt;div&gt;과일 이름은 {this.state.fruit} 입니다.&lt;/div&gt;;\n    )\n  }\n}</code>\n        </deckgo-highlight-code>\n<h6>state 변경하는 방법</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">this.setState((state) =&gt; {key: value});\nthis.setState(({key}) =&gt; {key: value}); //비구조화 할당\nthis.setState({key: value});</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">class Fruit extends Component {\n  state = {\n    fruit: &quot;apple&quot;,\n  }\n\n  banana = () =&gt; {\n    this.setState({\n      fruit: &quot;banana&quot;,\n    })\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;div&gt;과일 이름은 {this.state.fruit} 입니다.&lt;/div&gt;\n        &lt;button onClick={this.banana}&gt;Change&lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code>\n        </deckgo-highlight-code>\n<br>\n<h3>함수형의 state</h3>\n<p>리액트 v16.8 이전 부터는 함수형 컴포넌트에 state가 사용할 수 없었지만 이제는 <strong>useState</strong>라는 함수(Hooks)를 사용하여 함수형 컴포넌트에서도 state를 사용할 수 있습니다.</p>\n<h6>선언 방식</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">const [message, setMessage] = useState(&#39;React&#39;);</code>\n        </deckgo-highlight-code>\n<ul>\n<li>첫번째 message는 현재 상태</li>\n<li>두번째 setMessage는 바꾸어주는 함수</li>\n<li>useState의 값은 초기값</li>\n</ul>\n<h6>Example</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { useState } from &#39;react&#39;;\n\nfunction Fruit(){\n  const [fruit, setFruit] = useState(&#39;apple&#39;);\n\n  return(\n    &lt;div&gt;\n      &lt;div&gt;과일 이름은 {fruit} 입니다.&lt;/div&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<h6>state 변경하는 방법</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">setMessage(value)</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { useState } from &#39;react&#39;;\n\nfunction Fruit(){\n  const [fruit, setFruit] = useState(&#39;apple&#39;);\n  const banana = () =&gt; {\n    setFruit(&#39;banana&#39;);\n  }\n\n  return(\n    &lt;div&gt;\n      &lt;div&gt;과일 이름은 {fruit} 입니다.&lt;/div&gt;\n      &lt;button onClick={**banana**}&gt;Change&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<br>\n<h3>주의🚫🚫🚫🚫</h3>\n<p>함수형 이든 클래스형이든 <strong>state는 직접 조작하는게 아닌 setState나 useState와 같은 함수를 사용하여 변경</strong> 해야합니다.</p>\n<p><strong>배열이나 객체를 업데이트 해야될때는 복사본</strong>을 만들어 그 복사본을 업데이트한 후 setState나 useState 함수를 통해 업데이트 하여 작업합니다.</p>\n<h6>객체의 사본</h6>\n<p>ES6부터 도입된 spread 연산자 ...를 사용하여 복제할 수 있습니다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">const object = {a: 1, b: 2, c: 3}\nconst copy = {...object, b:4} //사본을 만들어 b 값만 덮어 쓰기</code>\n        </deckgo-highlight-code>\n<p><br><br><br></p>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li><a href=\"https://2019.stateofjs.com/front-end-frameworks/\">https://2019.stateofjs.com/front-end-frameworks/</a></li>\n<li>&#x3C;리액트를 다루는 기술 - 길벗></li>\n</ul>","frontmatter":{"title":"React.js - Component 이해하기","date":"2021-06-22","image":null},"id":"bcb52739-a965-5764-ad98-92ca058d2be3"}},"pageContext":{"slug":"/posts/2021-06-22-react-3/"}},"staticQueryHashes":["1707471100","3159585216","35752167"]}