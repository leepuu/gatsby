{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Javascript/2020-01-07-ajax-1/","result":{"data":{"markdownRemark":{"html":"<h1>1. Ajax란?</h1>\n<p><strong>A</strong>synchronous <strong>J</strong>avascript(비동기식 자바스크립트) <strong>A</strong>nd <strong>X</strong>ml의 약자로 XMLHttpRequest 객체를 사용하여<br>\n페이지 전체를 새로 고침하지 않고 페이지 일부만 데이터를 로드하는 기법이다.</p>\n<br>\n<h2>동기 방식 vs. 비동기 방식</h2>\n<p>동기는 순차적 비동기는 그 반대라고 생각하면 된다.<br>\n<u>동기 방식</u>은 순서대로 현재 코드가 실행 완료하여야 다음 코드가 실행되지만<br>\n<u>비동기 방식</u>은 순서대로 진행하지않으며, 현재 코드가 완료되지 않아도 다음 코드가 실행된다.</p>\n<br>\n<br>\n<h2>장·단점</h2>\n<p><strong>장점</strong><br>\n비동기식 방식으로 페이지 리로딩이 필요 없으며 데이터를 빠르게 처리할 수 있다.</p>\n<p><strong>단점</strong><br>\n한 페이지에 오래 머물 시 리소스가 계속 쌓여 속도가 느려지고<br>\n스크립트로 이루어져 있어 디버깅이 어려울 수 있다.</p>\n<p><br><br><br></p>\n<h1>2. 데이터 전송 형식</h1>\n<h2>CSV 형식</h2>\n<p>각 항목을 쉼표(<strong>,</strong>)로 구분해 데이터를 표현하는 방법으로 다른 형식에 비해 짧아 많은 양의 데이터를 전송할 때 유용하다.</p>\n<p>하지만 CSV 형식은 가독성이 떨어지고 각각의 데이터가 무엇을 나타내는지 알 수 없기 때문에 많이 쓰이진 않는다.</p>\n<pre><code>호랑이, 고양이과, tiger@animal.com\n늑대, 개과, wolf@animal.com\n물범, 물범과, seal@animal.com\n</code></pre>\n<br>\n<h2>XML 형식</h2>\n<p>HTML 형식처럼 <strong>태그</strong>로 표현하는 방법이다.<br>\n일부분만 보아도 각각의 데이터가 어떠한 것을 의미하는지 알 수 있지만, 태그 등이 슬데 없이 용량을 차지한다.</p>\n<pre><code class=\"language-html\">&#x3C;?xml  version=\"1.0\"  encoding=\"utf-8\" ?>\n&#x3C;life>\n    &#x3C;animal>\n        &#x3C;name>호랑이&#x3C;/name>\n        &#x3C;kind>고양이과&#x3C;/kind>\n        &#x3C;email>tiger@animal.com&#x3C;/email>\n    &#x3C;/animal>\n    &#x3C;animal>\n        &#x3C;name>늑대&#x3C;/name>\n        &#x3C;kind>개과&#x3C;/kind>\n        &#x3C;email>wolf@animal.com&#x3C;/email>\n    &#x3C;/animal>\n    &#x3C;animal>\n        &#x3C;name>물범&#x3C;/name>\n        &#x3C;kind>물범과&#x3C;/kind>\n        &#x3C;email>seal@animal.com&#x3C;/email>\n    &#x3C;/animal>\n&#x3C;/life>\n</code></pre>\n<br>\n<h2>JSON 형식</h2>\n<p>CSV 형식과 XML 형식의 단점을 극복한 형식으로, 자바스크립트에서 사용하는 <strong>객체</strong> 형태로 데이터를 표현하는 방법이다.</p>\n<p>CSV 형식과 다르게 가독성이 좋으며, XML 형식보다 적은 용량으로 데이터를 전달 할 수 있기 떄문에 거의 표준적으로 쓰인다.<br>\nJSON에는 객체, 배열, 문자열, 숫자, 불린, null만 들어갈 수 있으며, 문자열은 무조건 큰따옴표를 사용해야 한다.</p>\n<p>하지만 데이터의 양이 너무 많으면 데이터 추출 속도가 떨어지기 때문에 그럴땐 CSV 형식을 사용할 것을 권장한다.</p>\n<pre><code class=\"language-json\">[\n    {\n        \"name\": \"호랑이\",\n        \"kind\": \"고양이과\",\n        \"email\": \"tiger@animal.com\"\n    },\n    {\n        \"name\": \"늑대\",\n        \"kind\": \"개과\",\n        \"email\": \"wolf@animal.com\"\n    },\n    {\n        \"name\": \"물범\",\n        \"kind\": \"물범과\",\n        \"email\": \"seal@animal.com\"\n    }\n]\n</code></pre>\n<br>\n<table>\n<thead>\n<tr>\n<th>형식</th>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CSV</td>\n<td>용량이 적음</td>\n<td>가독성이 떨어짐</td>\n</tr>\n<tr>\n<td>XML</td>\n<td>가독성이 높음</td>\n<td>용량이 큼,<br>데이터의 양이 클수록 속도 저하</td>\n</tr>\n<tr>\n<td>JSON</td>\n<td>용량이 적음, 가독성이 높음</td>\n<td>데이터의 양이 클수록 속도 저하</td>\n</tr>\n</tbody>\n</table>\n<p><br><br><br><br><br></p>\n<blockquote>\n<p><subtitle> refernece</p>\n</blockquote>\n<ul>\n<li><a href=\"https://coding-factory.tistory.com/143\">https://coding-factory.tistory.com/143</a></li>\n<li><a href=\"https://jieun0113.tistory.com/73\">https://jieun0113.tistory.com/73</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 - Ajax 이해하기"},"excerpt":"1. Ajax란? Asynchronous Javascript(비동기식 자바스크립트) And Xml의 약자로 XMLHttpRequest 객체를 사용하여 페이지 전체를 새로 고침하지 않고 페이지 일부만 데이터를 로드하는 기법이다. 동기 방식 vs…"}},"pageContext":{"slug":"/posts/Javascript/2020-01-07-ajax-1/"}}}