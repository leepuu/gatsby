{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Javascript/2019-12-30-function-2/","result":{"data":{"markdownRemark":{"html":"<h1>1. 고차 함수(Higher-order Funtion)</h1>\n<p>함수를 인수로 받는 함수 또는 함수를 반환하는 함수로<br>\n함수를 인수로 받는 <code>Array</code>의 메소드들 (<code>forEach</code>, <code>map</code>, <code>reduce</code>, <code>filter</code> ···)이 고차 함수에 속한다.<br>\n다른 함수의 인수로 넘겨지는 함수를 <strong>콜백(callback)</strong>이라고 부르기도 한다.</p>\n<pre><code class=\"language-javascript\">// 함수를 인수로 받는 함수\nfunction func2(a, b) {\n    return sum(a, b)\n}\n\nconst sum = (a, b) => a + b\nfunc2(2, 4) //6\n\n// 함수를 반환하는 함수\nfunction func2(a, b) {\n    return function () {\n        return console.log(a + b)\n    }\n}\nconst func3 = func(2, 4)\nfunc3() // == func2(2,4)()라는 뜻이다.\n//괄호를 한번 더 쓰는 이유는 (2, 4)는 함수까지만 리턴하므로 익명함수를 한 번 더 호출해준다.\n</code></pre>\n<p><br><br><br></p>\n<h1>2. 클로저(Closure)</h1>\n<p>외부 함수 밖에서 내부함수가 호출되더라도 외부함수의 지역 변수에 접근할 수 있는데 이러한 함수로 내부함수가 자신이 선언되었을 때 환경(스코프)을 기억하고 있었다가 접근하는 방식이다.<br>\n즉, 바깥 스코프에 있는 변수를 가져다 사용하는 함수와 변수가 저장되는 저장소를 클로저라 부른다.</p>\n<pre><code class=\"language-javascript\">// 기존\nfunction func1(x) {\n    return x\n}\n\nfunc1(1) // 더이상 변수 x에 접근하지 못함\n\n// 클로저\nfunction func1(x) {\n    return function () {\n        return x\n    }\n}\nconst func2 = func1(1)\n\nfunc2() // 1\n</code></pre>\n<p><br><br><br></p>\n<h1>3. 재귀 함수 (Recursive Function)</h1>\n<p>함수 안에서 자기 자신을 호출하는 함수</p>\n<p><br><br><br><br><br></p>\n<blockquote>\n<p><subtitle> refernece</p>\n</blockquote>\n<ul>\n<li><a href=\"https://helloworldjavascript.net/pages/255-fp.html\">https://helloworldjavascript.net/pages/255-fp.html</a></li>\n<li><a href=\"https://jeong-pro.tistory.com/23\">https://jeong-pro.tistory.com/23</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 - 함수형 프로그래밍 기법"},"excerpt":"1. 고차 함수(Higher-order Funtion) 함수를 인수로 받는 함수 또는 함수를 반환하는 함수로 함수를 인수로 받는 Array의 메소드들 (forEach, map, reduce, filter…"}},"pageContext":{"slug":"/posts/Javascript/2019-12-30-function-2/"}}}