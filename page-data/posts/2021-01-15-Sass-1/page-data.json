{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2021-01-15-Sass-1/","result":{"data":{"markdownRemark":{"html":"<h1>✨ Sass 란?</h1>\n<p>Sass는 \"CSS Preprocessor\"로 한국어로 하면 CSS 전처기다.<br>\n굳이 왜 그냥 CSS 안쓰고 이런 전처리기를 쓰는거냐면<br>\n단순한 이유다. 쓰기 편하니까?<br>\n복잡한 작업이 쉬워지며, 코드가 재활용 가능하고 가독성을 높여주기 때문이다.\n<br><br>\nLess, Sass, Stylus 같이 다양한 css 전처리기가 있지만<br>\n2020 통계 기준 Sass가 제일 많이 쓰인다.</p>\n<p><img src=\"/posts/css/sass1.jpg\" alt=\"css사용량\"></p>\n<p class=\"sub_txt\">https://2020.stateofcss.com/en-US/technologies/pre-post-processors/</p>\n<p><br><br><br></p>\n<h1>✨ Sass 사용방법?</h1>\n<p>그렇다고 무턱대고 그냥 쓸 수는 없고 컴파일을 해야지만 사용 가능하다.<br>\n많은 컴파일 방법이 있지만 나는 전 포스팅인 gulp를 사용하여 컴파일한다.</p>\n<p><br><br><br></p>\n<h1>✨ Sass vs. Scss?</h1>\n<p>원래는 Sass가 먼저 나왔다. 하지만 사용하면서 Sass의 세번째 버전에서 Sass의 모든 기능을 가지며 CSS구문과 완전히 호환할 수 있도록 새로 나온게 Scss이다.<br>\n<br>\n∴ Scss는 CSS와 같은 구문으로 Sass기능을 모두 지원가능하단 말임</p>\n<h1>✨ Scss 문법</h1>\n<h4>1. 변수</h4>\n<p>이제는 css에서도 사용이 가능하지만 내 기준 Scss의 가장 큰 장점은 변수였다.<br>\n한 번 변수를 선언하면 </p>\n<deckgo-highlight-code language=\"terminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install --global gulp-cli\n$ gulp -v\nCLI version: 2.3.0\nLocal version: 4.0.2</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h4>2. Gulp 로컬에 설치</h4>\n<p>npm init는 node 프로그램을 시작하는 명령어로 package.json을 설치한다.<br>\n명령어는 내가 실행할 디렉토리에서 실행해야됨!! </p>\n<p>그러면 아래 상황들이 나오는데 입맛에 맞게 설정하면 된다.</p>\n<p>나는 일단 설치가 목적이기 때문에 엔터만 누른다. (나중에 수정 가능)</p>\n<deckgo-highlight-code language=\"terminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm init\n\npackage name: (test)\nversion: (1.0.0)\ndescription:\nentry point: (index.js)\ntest command:\ngit repository:\nkeywords:\nauthor:\nlicense: (ISC)</code>\n        </deckgo-highlight-code>\n<br>\n<p>전역에도 설치했지만 모듈을 설치하기 위해서 같은 디렉토리에<br>\n아래 명령어를 입력한다.</p>\n<deckgo-highlight-code language=\"terminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install --save-dev gulp</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h4>3-1. gulpfile.js 셋팅하기</h4>\n<p>Gulp를 실행하기 위해선 gulpfile.js를 생성해줘야한다.<br>\n자동으로 생기는게 아니기때문에 직접 새 파일로 생성한다.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">// gulpfile.js\n\nfunction defaultTask(cb) {\n  console.log(&#39;걸프 시작하기&#39;)\n  cb();\n}\n\nexports.default = defaultTask</code>\n        </deckgo-highlight-code>\n<p>이제 터미널에 gulp를 입력해주면 아래 처럼 나온다.</p>\n<deckgo-highlight-code language=\"terminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ gulp\n[14:59:59] Using gulpfile D:\\Study\\test2\\gulpfile.js\n[14:59:59] Starting &#39;default&#39;...\n걸프 시작하기\n[14:59:59] Finished &#39;default&#39; after 3.2 ms</code>\n        </deckgo-highlight-code>\n<br>\n<p><strong>default</strong>는 gulp를 실행하면 시작하는 동작을 말한다.<br>\n함수 defaultTask를 실행시켰기 때문에 console.log인 \"걸프 시작하기\"가 나온다.</p>\n<p><br><br></p>\n<h4>3-2. Gulp 메서드</h4>\n<p>아주아주 기초적인건 설치가 되었다.<br>\n근데 우리가 gulp를 사용하기 위해선 메서드를 알아둬야된다.<br>\n많은 메서드가 있지만 대표적으로 쓰이는 것만 설명하겠음</p>\n<h2><code>src</code> 메서드</h2>\n<p>작업할 대상 되는 <strong>파일을 지정</strong>해주는 명령어</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.src (globs) </code>\n        </deckgo-highlight-code>\n<ul>\n<li>globs : 어떤 파일을 읽을 건지 결정, 파일을 선택하는 방식은 node-glob 문법을 따른다.</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.src(&quot;./src/img/*&quot;)</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2><code>pipe</code> 메서드</h2>\n<p>gulp의 스트리밍 기능으로 src로 대상을 정했으면 각 파일을 stream 형태로 읽어 다음 <strong>플러그인으로 연결</strong>해주는 명령어</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.src(&quot;./src/img/*&quot;).pipe(gulp.dest(&quot;./dist/img&quot;));</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2><code>dest</code> 메서드</h2>\n<p>작업이 종료된 파일의 <strong>저장되는 경로</strong>를 지정해주는 명령어</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.dest(directory, [options])</code>\n        </deckgo-highlight-code>\n<ul>\n<li>dest : 파일이 기록될 디렉토리</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.src(&quot;./src/img/*&quot;).pipe(gulp.dest(&quot;./dist/img&quot;));</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2><code>watch</code> 메서드</h2>\n<p>파일의 변경, 업데이트 등을 <strong>감지하여 작업을 수행</strong>하는 명령어</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.watch(globs , [ options ] , [ task ] )</code>\n        </deckgo-highlight-code>\n<ul>\n<li>globs : 감시할 파일</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">function css() {\n  return gulp.src(&#39;./src/scss/*.scss&#39;)\n\t.pipe(sass({outputStyle: &#39;compressed&#39;}).on(&#39;error&#39;, sass.logError))\n\t.pipe(gulp.dest(&#39;./dist/css&#39;));\n}\n\ngulp.watch(&quot;./src/scss/**/*&quot;, css);</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2><code>task</code> 메서드</h2>\n<p>작업을 선언하는 명령어로 이제 <strong>더 이상 쓰이지 않는다</strong>.</p>\n<p><br><br></p>\n<h2><code>series</code> 메서드</h2>\n<p>작업들을 조합하며 실행하는 메서드로 <strong>순차적으로</strong> 실행한다. 직렬구조</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.series(...tasks)</code>\n        </deckgo-highlight-code>\n<ul>\n<li>tasks : 실행할 작업들</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.series(css, js,img,html);</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2><code>parallel</code> 메서드</h2>\n<p>작업들을 조합하며 실행하는 메서드로 <strong>서로 관련없이</strong> 실행한다. 병렬구조</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.series(...tasks)</code>\n        </deckgo-highlight-code>\n<ul>\n<li>tasks : 실행할 작업들</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">gulp.series(gulp.parallel(css, js, img,html));</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h4>3-3. sass 설치</h4>\n<p>이제 원하는 플러그인들을 설치해보자.\n우리가 gulp를 사용하는 이유는 다양하지만 제일 큰 이유는 sass를 사용하기 위함이 아닌가 싶다.<br>\nsass를 사용하기 위해선 빌드 시스템이 필요하기 때문이다. </p>\n<p>나는 dartSass를 설치한다.\n이유는 없다 그냥 따라해라 (나중에 설명함)</p>\n<p>아래와 같이 선언해주면 된다.</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gulp-dart-sass\">gulp-dart-sass의 자세한 사용방법</a></li>\n<li><a href=\"https://github.com/sass/node-sass#options\">sass 옵션</a></li>\n</ul>\n<deckgo-highlight-code language=\"teminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install gulp-dart-sass --save-dev</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">// gulpfile.js\nconst gulp = require(&#39;gulp&#39;); //require()은 ES6의 import랑 같은 메서드\nconst sass = require(&#39;gulp-dart-sass&#39;); \n\nfunction css() {\n  return gulp.src(&#39;./src/scss/*.scss&#39;)\n\t.pipe(sass({outputStyle: &#39;compressed&#39;}).on(&#39;error&#39;, sass.logError))\n\t.pipe(gulp.dest(&#39;./dist/css&#39;));\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h4>3-4. babel 설치</h4>\n<p>그 다음은 javascript ES6버전이후를 사용하기 위한 babel을 설치해준다.</p>\n<p>아래와 같이 선언해주면 된다.</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gulp-babel\">gulp-babel의 자세한 사용방법</a>  </li>\n<li><a href=\"https://babeljs.io/docs/en/options\">babel 옵션</a>  </li>\n</ul>\n<deckgo-highlight-code language=\"teminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install --save-dev gulp-babel @babel/core @babel/preset-env</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">// gulpfile.js\nconst gulp = require(&#39;gulp&#39;); //require()은 ES6의 import랑 같은 메서드\nconst babel = require(&#39;gulp-babel&#39;);\n\nfunction js(){\n\treturn gulp.src(&#39;./src/js/*.js&#39;)\n\t.pipe(babel())\n\t.pipe(gulp.dest(&#39;./dist/js&#39;))\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h4>3-5. browser-sync 설치</h4>\n<p>작업을 하며 일일히 저장하고 실행하기 번거롭다...<br>\n이러한 불편함을 극복하기 위해 browser-sync 플러그인을 설치해주면 되는데<br>\n파일이 바뀔 때 마다 실시간으로 반영해준다.</p>\n<ul>\n<li><a href=\"https://browsersync.io/docs/options/\">browsersync 옵션</a>  </li>\n</ul>\n<deckgo-highlight-code language=\"terminal\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install browser-sync --save-dev</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">const browsersync = require(&quot;browser-sync&quot;).create(); //browser-sync 호출\n\nfunction server(done){\n\treturn browsersync.init({\n\t\tport:8030, //실행할 로컬 포트를 정해준다.\n\t\tserver:{\n\t\t\tbaseDir: &#39;./dist/&#39; //실행할 기본 파일\n\t\t}\n\t});\n\tdone()\n}\n\nfunction watchFiles() {\n  gulp.watch(&#39;./src/*.html&#39;, browserSyncReload);\n}\n\nconst watch = gulp.series(build, gulp.parallel(watchFiles, server));</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h4>4. build</h4>\n<p>마지막으로 빌드하면 끝!!!!\n폴더구조는 내 마음대로지만 원하는 입맛대로 바꾸면 되니 참고만 해주셈요  </p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">...\n\nconst build = gulp.series(gulp.parallel(css, js, img,html));\nconst watch = gulp.series(build, gulp.parallel(watchFiles, server));\n\t\nexports.build = build;\nexports.watch = watch;\nexports.default = watch;</code>\n        </deckgo-highlight-code>\n<p>일단은 내가 사용한 기본 플러그인들은 설정되었다.<br>\n취향에 맞게 플러그인을 추가하고 제거할 수 있으며<br>\n위의 것들은 정말 기본이라서 웬만하면 삭제 안하고 쭉 쓸 것 같다.</p>\n<p><br><br><br></p>\n<blockquote>\n<p><subtitle> refernece</p>\n</blockquote>\n<ul>\n<li><a href=\"https://gulpjs.com/\">https://gulpjs.com/</a></li>\n</ul>","frontmatter":{"title":"Sass - 시작하기","date":"2021-01-15","image":"test"},"id":"267ddb67-3149-52ce-a3f5-ef27db44a7ba"}},"pageContext":{"slug":"/posts/2021-01-15-Sass-1/"}},"staticQueryHashes":["1707471100","3159585216","35752167"]}