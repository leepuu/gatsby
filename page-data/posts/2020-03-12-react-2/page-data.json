{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2020-03-12-react-2/","result":{"data":{"markdownRemark":{"html":"<h1>1. JSX(JavaScript XML) 란?</h1>\n<p><strong>JavaScript를 확장한 문법</strong>으로 XML과 매우 닮았다.<br>\n편하게 HTML과 JavaScript를 합쳤다고 생각하면된다.<br>\n말하자면 자바스크립트 내부에 마크업을 할 수 있다는거다!!!</p>\n<p>굳이 JSX 문법을 쓰는 이유는 아래 예시를 보면 된다.</p>\n<h4>JSX</h4>\n<pre><code class=\"language-javascript\">function App() {\n    return (\n        &#x3C;div>\n            Hello &#x3C;b>Pureum&#x3C;/b>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<br>\n<h4>일반 자바스크립트</h4>\n<pre><code class=\"language-javascript\">function App() {\n    return React.createElement(\"div\", null, \"Hello \", React.createElement(\"b\", null, \"Pureum\"))\n}\n</code></pre>\n<p><br><br></p>\n<p>JSX 문법은 브라우저가 실행되면 바벨을 사용하여 일반 자바스크립트 문법으로 변환되는데 살펴보면 매우 복잡하다는걸 알 수 있다.<br>\n일일히 계속 createElement 써준다고 생각해봐라.. 얼마나 답답쓰한가..ㅠㅠㅠ</p>\n<p>그래서 React를 사용할 땐 JSX가 필수는 아니지만 시각적으로나 어디나 더 좋을 거라고 생각된다.</p>\n<p><br><br><br></p>\n<h1>2. 장점</h1>\n<h2>1. 보기 쉽고 익숙하다.</h2>\n<p>위 예시처럼 일반 자바스크립트와 비교하여 가독성이 높고 작성하기 쉽다.<br>\n또한 친숙한 구문을 사용하기 때문에 익숙하다. (ex. html코드와 JS코드)</p>\n<br>\n<h2>2. 활용도가 높다.</h2>\n<p>우리가 알고있는 HTMl태그를 사용할 수 있는 뿐더러, Component도 작성할 수 있기때문에<br>\n하나로 여러가지를 사용할 수 있다.</p>\n<p><br><br><br></p>\n<h1>3. 문법</h1>\n<h2>1. 하나의 엘리먼트로 꼭 감싸야한다.</h2>\n<p>컴포넌트안에 두개 이상의 요소가 있다면 <strong>반드시 부모 요소 하나</strong>로 감싸야한다. (ex. <code>&#x3C;F></code>)</p>\n<pre><code class=\"language-javascript\">import React from 'react';\n\n// Bad\nfunction App(){\n  return (\n    &#x3C;h1>리&#x3C;/h1>\n    &#x3C;h2>액&#x3C;/h2>\n    &#x3C;h3>트&#x3C;/h3>\n  )\n}\n\n//Good\nfunction App(){\n  return (\n    &#x3C;div>\n      &#x3C;h1>리&#x3C;/h1>\n      &#x3C;h2>액&#x3C;/h2>\n      &#x3C;h3>트&#x3C;/h3>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<br>\n<p>리액트16 이상 부턴 <strong><code>Fragment</code></strong> 라는 기능을 사용하면 된다.</p>\n<pre><code class=\"language-javascript\">import React, { Fragment } from \"react\"\n\nfunction App() {\n    return (\n        &#x3C;Fragment>\n            &#x3C;h1>리&#x3C;/h1>\n            &#x3C;h2>액&#x3C;/h2>\n            &#x3C;h3>트&#x3C;/h3>\n        &#x3C;/Fragment>\n    )\n}\n</code></pre>\n<br>\n<p>더 간단하게는 아래 처럼 표현이 가능하다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    return (\n        &#x3C;>\n            &#x3C;h1>리&#x3C;/h1>\n            &#x3C;h2>액&#x3C;/h2>\n            &#x3C;h3>트&#x3C;/h3>\n        &#x3C;/>\n    )\n}\n</code></pre>\n<p><br><br></p>\n<h2>2. 자바스크립트 표현</h2>\n<p>자바스크립트를 사용하려면 <strong><code>{}</code></strong> 로 감싸야한다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    const name = \"pureum\"\n    return (\n        &#x3C;div>\n            &#x3C;h1>{name}&#x3C;/h1>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p><br><br></p>\n<h2>3. 조건문 표현</h2>\n<p>JSX안에서는 if문 구문을 사용하지 못한다.<br>\n그러므로 JSX밖에서 if문 사용하여 사전에 값을 설정하거나 <code>{}</code>안에 <strong>조건문 연산자</strong>를 사용한다.<br>\n<strong>switch문은 작성해도 된다.</strong></p>\n<h4>삼항연산자</h4>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    const name = \"pureum\"\n    return &#x3C;div>{name == \"pureum\" ? &#x3C;h1>맞습니다.&#x3C;/h1> : &#x3C;h1>아닙니다.&#x3C;/h1>}&#x3C;/div>\n}\n</code></pre>\n<h4>AND 연산자(&#x26;&#x26;)</h4>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    const name = \"pureum\"\n    return &#x3C;div>{name == \"pureum\" &#x26;&#x26; &#x3C;h1>맞습니다.&#x3C;/h1>}&#x3C;/div>\n}\n</code></pre>\n<p><br><br></p>\n<h2>4. 인라인 스타일링</h2>\n<p>리액트에서 스타일 적용할 때는 문자열이 아닌 <strong>객체</strong> 형태로,<br>\n스타일 이름은 <strong>카멜 표기법</strong>으로 작성해야한다.</p>\n<pre><code class=\"language-javascript\">import React from 'react';\n\nfunction App(){\n  const name = 'pureum';\n  const style = {\n      backgroundColor: 'black',\n      fontSize: '15px'\n  };\n\n  return (\n    &#x3C;div>\n      &#x3C;h1 style={style}>{name}&#x3C;h1>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p><br><br></p>\n<h2>5. 꼭 닫아야하는 태그</h2>\n<p>HTML 코드를 작성 할 때에는 <code>&#x3C;input></code>과 같은 태그들은 꼭 닫지 않아도 되었는데,<br>\n리액트에선 꼭꼮꼭 닫아줘야한다!!</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    return (\n        &#x3C;div>\n            &#x3C;input type=\"text\" />\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p><br><br></p>\n<h2>6. 주석</h2>\n<p>주석은 <code>{/* */}</code>같은 형식으로 닫아주어야 한다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    return &#x3C;div>{/* &#x3C;input /> */}&#x3C;/div>\n}\n</code></pre>\n<p><br><br></p>\n<h2>7. className과 htmlFor</h2>\n<p>일반 HTML의 <code>&#x3C;div class></code>와 <code>&#x3C;input for></code>같은 경우는 기존 자바스크립트의 for문과 class와 헷갈릴 수 있으므로,<br>\nclass -> <strong><code>className</code></strong>, for -> <strong><code>htmlFor</code></strong> 으로 바꿔 써야한다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\n\nfunction App() {\n    return (\n        &#x3C;div className=\"wrap\">\n            &#x3C;input htmlfor=\"name\" />\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li><a href=\"https://2019.stateofjs.com/front-end-frameworks/\">https://2019.stateofjs.com/front-end-frameworks/</a></li>\n<li>&#x3C;리액트를 다루는 기술 - 길벗></li>\n</ul>","frontmatter":{"title":"React.js - JSX 이해하기","date":"2020-03-12"},"id":"7dfd2705-b6c6-5f3a-b2de-b62c4c6e6e10"}},"pageContext":{"slug":"/posts/2020-03-12-react-2/"}}}