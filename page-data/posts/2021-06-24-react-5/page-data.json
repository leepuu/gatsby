{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2021-06-24-react-5/","result":{"data":{"markdownRemark":{"html":"<h1>🎣 Hooks이란?</h1>\n<p>Hooks는 React v16.8부터 새로 추가된 기능으로,<br>\n기존 클래스형 컴포넌트에서 사용된 <strong>상태 값(state), 여러 LifeCycle 기능</strong>등을\n<strong>함수형 컴포넌트</strong>에서 사용할 수 있도록 제공된 기능이다.</p>\n<br>\n<p>하지만 Hook이 있다고 해서 클래스형 컴포넌트가 더이상 지원되지 않는건 아니지만,<br>\n공식 문서에서는 <strong>함수형 컴포넌트 + Hook</strong> 조합을 추천한다.</p>\n<br>\n<p>💡 Hook은 react를 불러오는 명령어에서 꼭 명시해야지 사용가능하다.  </p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, {Hook} from &#39;react&#39;;</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h1>🎣 Hooks 종류</h1>\n<h2>1. useState</h2>\n<p>가~~~장 기본적인 Hook으로 함수형 컴포넌트에서도 가변적인 값을 지닐 수 있도록 제공한다.</p>\n<h6>문법</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">const [value, setValue] = useState(0);</code>\n        </deckgo-highlight-code>\n<p><code>useState</code> 함수의 파라미터에는 초깃값을 넣어준다.<br>\n예시에는 0을 넣어줬는데 javascript의 변수와 마찬가지로 원하는 기본값을 넣을 수 있다. (ex. Boolean, String, number 등등)  </p>\n<br>\n<p>이 함수를 호출하면 배열이 반환되는데,<br>\n여기서 <strong>첫번째 원소는(value) 상태값 / 두번째 원소는(setValue) 상태를 설정하는 함수</strong>이다.</p>\n<p>위 문법은 배열 비구조화 할당(ES6)을 사용하여 작성된 것으로 풀어쓰면 아래와 같은 문법이다.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">const valueState = useState(0);\nconst value = valueState[0];\nconst setValue = valueState[1];</code>\n        </deckgo-highlight-code>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { useState } from &#39;react&#39;; // useState 호출\n\nfunction Counter(){\n  const [count, setCount] = useState(0); // &quot;count&quot;라는 새로운 상태 값 정의\n  \n  return(\n    &lt;div&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; {setCount(count + 1)}}&gt; + &lt;/button&gt; // setCount 이용하여 &quot;count&quot; 값 변경\n      &lt;button onClick={() =&gt; {setCount(count - 1)}}&gt; - &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<h2>2. useEffect</h2>\n<p>컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook으로,<br>\n주로 <strong>처음 나타났을 때, 컴포넌트가 사라질 때, 업데이트 될 때</strong> 작동한다.  </p>\n<p class=\"sub_txt\">(클래스형 컴포넌트의 LifeCycle 기능 중 componentDidMount, componentDidUpdate, componentWillUnmount 이 합쳐진 기능)</p>\n<h6>문법</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">useEffect(() =&gt; { 실행될 동작 })</code>\n        </deckgo-highlight-code>\n<p><code>useEffect</code>함수는 화살표 함수를 사용하여 작업하는데, 작업할 동작을 함수안에 입력하면 된다.<br>\n주로 <code>useEffect</code>는 렌더링되고 난 직후마다 실행되며,<br>\n<strong>두 번째 파라미터 배열에 무엇을 넣냐에 따라 실행조건</strong>이 달라진다.</p>\n<h4>1. 처음 렌더링 되었을 때</h4>\n<p>처음 렌더링 되었을 때만 실행하고, 업데이트 될때 실행을 하고싶지않다면<br>\n아래와 같이 <strong>두 번째 파라미터에 비어있는 배열</strong>을 넣어주기</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">useEffect(() =&gt; { 실행될 동작 }, []) // 두번째 빈 배열 []</code>\n        </deckgo-highlight-code>\n<br>\n<h4>2. 특정 값이 업데이트 될 때</h4>\n<p>특정 값이 변경될 때만 호출하고 싶은 경우는<br>\n두 번째 파라미터로 전달되는 배열 안에 <strong>검사하고 싶은 값</strong>을 넣어주면 됩니다.</p>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">useEffect(() =&gt; { 실행될 동작 }, [value]) // value의 값이 바뀔 때 마다</code>\n        </deckgo-highlight-code>\n<br>\n<h4>3. 뒷정리(cleanup) 함수</h4>\n<p>뒷정리 함수는 useEffect가 더 이상 실행할 필요가 없을 때 청소하는 용도로 주로 아래 상황에서 사용한다.</p>\n<ul>\n<li>setInterval, setTimeout 을 사용하여 등록한 작업들 clear 할 때</li>\n<li>컴포넌트가 unmount 또는 업데이트 되기 전 작업 수행할 때</li>\n</ul>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">useEffect(() =&gt; { \n  실행될 동작\n  return () =&gt; {\n    console.log(&#39;cleanup&#39;) // return 값에 넣어준다.\n  }\n})</code>\n        </deckgo-highlight-code>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React, { useState, useEffect } from &#39;react&#39;; // useEffect 호출\n\nfunction Counter(){\n  const [value, setValue] = useState(true);\n  \n  const useEffect(() =&gt; {\n    setTimeout(() =&gt; {\n      setValue(false)\n    }, 2000);\n  },[]); // 처음 렌더링 되었을 때\n  \n  return(\n    &lt;div&gt;\n      {\n        value &amp;&amp; &lt;p&gt;팝업&lt;/p&gt;\n      }\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br><br></p>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li><a href=\"https://edu.goorm.io/learn/lecture/16422/%EA%B0%80%EC%9E%A5-%ED%95%AB%ED%95%9C-fe-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-react-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EC%95%84%EB%B3%B4%EA%B8%B0/\">https://edu.goorm.io/learn/lecture/16422/%EA%B0%80%EC%9E%A5-%ED%95%AB%ED%95%9C-fe-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-react-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EC%95%84%EB%B3%B4%EA%B8%B0/</a></li>\n<li>&#x3C;리액트를 다루는 기술 - 길벗></li>\n</ul>","frontmatter":{"title":"React.js - Hooks 🎣","date":"2021-06-24","image":null},"id":"dff0a521-042e-5194-b530-f57bcceed7d1"}},"pageContext":{"slug":"/posts/2021-06-24-react-5/"}},"staticQueryHashes":["1707471100","3159585216","35752167"]}