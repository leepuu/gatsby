{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2021-06-24-react-4/","result":{"data":{"markdownRemark":{"html":"<h1>🎨 컴포넌트 스타일링</h1>\n<p>컴포넌트를 스타일링하는 방법은 매우 다양한데,<br>\n이 포스팅에서는 가장 기본적인 CSS로 시작하여 총 <strong>4</strong>가지 방법을 소개하겠따~~~</p>\n<p><br><br></p>\n<h1>🎨 CSS</h1>\n<p>가장 흔하고 기본중에 기본인 일반 CSS만을 사용하여 스타일링이 가능하다.<br>\nCSS 파일을 제작해 컴포넌트에서 <strong>import</strong>하여 사용할 수 있다.</p>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\nimport &quot;./App.css&quot;\n\nfunction App() {\n  return (\n    &lt;div class=&quot;app&quot;&gt;\n      &lt;header class=&quot;header&quot;&gt;제목&lt;/header&gt;\n      &lt;p class=&quot;text&quot;&gt;내용&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<h6>App.css</h6>\n<deckgo-highlight-code language=\"css\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">.app {\n  text-align: center;\n}\n.header {\n  font-size: 30px;\n  font-weight: 700;\n}\n.text {\n  font-size: 16px;\n  line-height: 1.56;\n}</code>\n        </deckgo-highlight-code>\n<br>\n<p>CSS를 사용할 때는 <strong>클래스가 중복되지 않게</strong> 해야 한다.<br>\n여러 개의 컴포넌트들을 웹팩을 통해 합쳐지게 되는데 그 과정에서 스타일 파일도 겹치지 때문에 주의해야 한다.</p>\n<p><br><br><br></p>\n<h1>🎨 CSS Module</h1>\n<p>CSS 클래스가 중첩되는 것 방지할 수 있는 방법으로,<br>\nModule은 css 클래스를 불러올 때 <code>[파일 이름]_[클래스 이름]__[해쉬값]</code>으로 고유한 클래스명을 부여 하여 동일한 클래스명이 생기지 않게한다.</p>\n<p>대신 CSS 파일의 확장자를 <code>[파일 이름].module.css</code>로 지정해야 한다.</p>\n<h6>List.module.css</h6>\n<deckgo-highlight-code language=\"css\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">.list_wrap {\n  text-align: left;\n  width: 500px;\n  margin: auto;\n}\n\n.list_wrap li {\n  list-style: circle;\n}</code>\n        </deckgo-highlight-code>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import styles from &quot;./List.module.css&quot;\n\nfunction App() {\n  return (\n    &lt;div className=&quot;App&quot;&gt;\n      &lt;ul className={styles.list_wrap}&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li&gt;2&lt;/li&gt;\n        &lt;li&gt;3&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App</code>\n        </deckgo-highlight-code>\n<br>\n<p>위 <code>List.module.css</code> 같이 모듈화한 스타일 파일을 객체로 받아와 태그에 <code>className={styles.[클래스명]}</code> 지정해준다.<br>\n그러면 아래와 같이 고유한 클래스명이 지정되어 중첩되지 않는다.</p>\n<p><img src=\"/posts/react/react-4/module-1.jpg\" alt=\"모듈 클래스\"></p>\n<p><br><br><br></p>\n<h1>🎨 Sass</h1>\n<p>Sass는 CSS 전처기로 복잡한 작업을 쉽게 할 수 있다.<br>\n코드의 재사용, 가독성을 높여주어 유지보수에서 유용하다.</p>\n<p>자세한 사항은 이 <a href=\"../2021-01-15-Sass-1\">포스팅</a>을 참고하면 됩니당~</p>\n<h2>시작하기</h2>\n<p>리액트에서 scss를 사용하기 위해선 아래 라이브러리를 설치해 주어야한다.</p>\n<deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install node-sass</code>\n        </deckgo-highlight-code>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\nimport &quot;./App.scss&quot;\n\nfunction App() {\n  return (\n    &lt;div class=&quot;app&quot;&gt;\n      &lt;header class=&quot;header&quot;&gt;제목&lt;/header&gt;\n      &lt;p class=&quot;text&quot;&gt;내용&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<h6>App.scss</h6>\n<deckgo-highlight-code language=\"scss\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">.app {\n  text-align: center;\n  .header {\n    font-size: 30px;\n    font-weight: 700;\n  }\n  .text {\n    font-size: 16px;\n    line-height: 1.56;\n  }\n}</code>\n        </deckgo-highlight-code>\n<br>\n<p>css module과 마찬가지로 파일명 뒤에 <code>[파일 이름].module.scss</code>로 변경하면 모듈화 가능</p>\n<p><br><br><br></p>\n<h1>🎨 styled-components</h1>\n<p>지금까지 소개했던 것 중 가장 생소한 방법으로, <strong>CSS-in-JS</strong>방식으로 Javascript 파일 안에 스타일을 선언하는 방식이다.<br>\nCSS-in-JS 라이브러리는 다양한 종류가 있는데 그 중 styled-components는 개발자들이 제일 선호하는 라이브러리다.</p>\n<p><img src=\"/posts/react/react-4/styled-1.png\" alt=\"모듈 클래스\"></p>\n<p class=\"sub_txt\">https://www.npmtrends.com/aphrodite-vs-emotion-vs-glamorous-vs-jss-vs-radium-vs-styled-components-vs-styletron</p>\n<br>\n<h2>시작하기</h2>\n<p>먼저 styled-components 라이브러리를 설치한다.</p>\n<deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">$ npm install styled-components</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<p>App 컴포넌트 상단에 import로 styled-components를 선언한 뒤,</p>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\nimport styled from &quot;styled-components&quot;\n\nfunction App() {\n  return (\n    &lt;div class=&quot;app&quot;&gt;\n      &lt;header class=&quot;header&quot;&gt;제목&lt;/header&gt;\n      &lt;p class=&quot;text&quot;&gt;내용&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p><br><br></p>\n<p>스타일 선언한 첫번째 컴포넌트를 제작한다.\nstyled-component는 ES6문법인 <strong>Template literals를 사용</strong>하여 스타일을 선언합니다.</p>\n<h6>App.js</h6>\n<deckgo-highlight-code language=\"jsx\"  terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">import React from &quot;react&quot;\nimport styled from &quot;styled-components&quot;\n\nconst Box = styled.div`\n  width: 500px;\n  height: 500px;\n  border-radius: 5px;\n  background-color: ${(props) =&gt; props.color};\n`\n\nfunction App() {\n  return (\n    &lt;div class=&quot;app&quot;&gt;\n      &lt;header class=&quot;header&quot;&gt;제목&lt;/header&gt;\n      &lt;p class=&quot;text&quot;&gt;내용&lt;/p&gt;\n      &lt;Box color={black} /&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<br>\n<h2>장점</h2>\n<ol>\n<li><em>CSS가 중첩되지 않음</em><br>\n기존 방식인 css, scss 파일을 밖에 두고 import 해오는 형식이 아닌\n컴포넌트 내부에 선언하기 때문에 css가 전역으로 중첩되지 않습니다.</li>\n<li>\n<p><em>조건부 스타일링</em><br>\n기존 방식은 className을 일일히 선언하여 조건에 맞는 스타일을 적용하였었는데,\nstyled-component는 컴포넌트에게 전달된 props 값을 참조하여 조건부 스타일링이 가능합니다.</p>\n<div class=\"box_list_none\">\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"one-dark\" >\n          <code slot=\"code\">- ###### Before\n\n- ```jsx\n  .title{\n    font-size: 20px;\n    color: black;\n    &amp;.white{\n      color:white;\n    }\n    &amp;.red{\n      color:red;\n    }\n  }\n\n  return(\n    &lt;h1 class=&quot;title red&quot;&gt;제목&lt;/h1&gt;\n  )\n  ```\n\n- ###### After\n\n- ```jsx\nconst Title = styled.h1`\n  font-size: 20px;\n  color: ${props =&gt; props.color || black};\n`\nreturn(\n  &lt;Title color=&quot;red&quot;&gt;제목&lt;/Title&gt;\n)\n```\n&lt;br&gt;\n\n&lt;/div&gt;</code>\n        </deckgo-highlight-code>\n</li>\n<li><em>className 생성</em><br>\n직접 className을 선언하지 않아도 자동으로 className을 만들기 때문에 네이밍에 대한 어려움을 줄일 수 있습니다.\n<img src=\"/posts/react/react-4/styled-2.png\" alt=\"클래스 이름\"></li>\n</ol>\n<h3>단점</h3>\n<ul>\n<li><em>컴포넌트 관리</em><br>\ncss를 선언할 태그는 모두 컴포넌트로 만들어야 하기 때문에 가독성이 떨어지고 관리가 어려워집니다. css를 수정할 때 마다 해당하는 컴포넌트 파일 위치를 찾아야하는 번거로움이 있습니다.</li>\n</ul>\n<p><br><br><br></p>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li><a href=\"https://edu.goorm.io/learn/lecture/16422/%EA%B0%80%EC%9E%A5-%ED%95%AB%ED%95%9C-fe-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-react-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EC%95%84%EB%B3%B4%EA%B8%B0/\">https://edu.goorm.io/learn/lecture/16422/%EA%B0%80%EC%9E%A5-%ED%95%AB%ED%95%9C-fe-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-react-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EC%95%84%EB%B3%B4%EA%B8%B0/</a></li>\n<li>&#x3C;리액트를 다루는 기술 - 길벗></li>\n</ul>","frontmatter":{"title":"React.js - Component Styling🎨","date":"2021-06-24","image":"react"},"id":"ec107a1a-6648-5914-b98f-7d36ab3f4cb8"}},"pageContext":{"slug":"/posts/2021-06-24-react-4/"}},"staticQueryHashes":["1707471100","3159585216","35752167"]}