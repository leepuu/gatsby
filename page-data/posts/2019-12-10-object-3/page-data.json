{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/2019-12-10-object-3/","result":{"data":{"markdownRemark":{"html":"<p>아직도 이해를 완벽히 못했고.. 이해하려고 노력하는 포스팅이다...<br>\n이제 좀... 알자... 프로토타입아..</p>\n<p><br><br><br></p>\n<h1>1. 프로토타입 (prototype)?</h1>\n<p>객체 지향 언어는 총 두가지로 나뉜다.<br>\nC++, Java, Python 같은 클래스 기반의 객체 지향 언어와 JavaScript의 프트로타입 기반 객체 지향 언어로 이루어져있다.<br>\n프로토타입 기반의 객체 지향 언어는 class라는 개념이 존재하지않기 때문에 객체의 원형인 프로토타입을 이용하여 새로운 객체를 만들어내는 언어이다.</p>\n<p><br><br><br></p>\n<h1>2. 프로토타입 사용 방법</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fruit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">price</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">과일은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fruit1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fruit2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span>\n\nfruit1<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfruit2<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예시처럼 만약 과일이 늘어난다면 new fruit를 통해 계속 생성할 수 있다.<br>\n하지만 모든 객체에 <code class=\"language-text\">price</code> 메소드가 저장되어있기 때문에<br>\n10개의 객체를 생성한다면 10개의 함수가 생성된다.</p>\n<p>이런다면 공통으로 사용하는 속성과 메소드는 중복해서 저장하게 되고 쓸데없는 메모리를 차지하게 된다.<br>\n프로토타입은 이런 중복문제나 효율적으로 저장하기 위해 사용된다.<br>\n결과적으로 <code class=\"language-text\">price</code>라는 메소드는 한 번만 메모리에 올리고 가져다가 사용하는 구조로 만들어준다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">price</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">과일은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> appleFruit <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\nappleFruit<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"apple\"</span>\n\n<span class=\"token keyword\">const</span> bananaFruit <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\nbananaFruit<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"banana\"</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">Object.create</code>함수를 이용해 한 객체에서 다른 객체의 기능을 가져와 사용하는 것을 <strong>프로토타입 상속</strong>이라고 한다.<br>\n\"fruit은 appleFruit의 프로토타입이다. or appleFruit 객체는 fruit 객체를 상속받았다.\" 라고 표현한다.</p>\n<p><br><br><br></p>\n<h1>3. new와 Object.create()의 차이</h1>\n<p>프로토타입을 선언하는데에는 앞서 예시들었던 Object.create()과 생성자 new() 두가지 방법이 있다.<br>\n아래 수행하는 작업 순서를 알아보자.</p>\n<br>\n<h2>object.create()</h2>\n<p>Object.create()는 객체를 인자로 받아 그 객체가 프로토타입 체인으로 연결된 새로운 객체를 리턴해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">eat</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eatFood<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> puppy <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span>\npuppy<span class=\"token punctuation\">.</span>eatFood <span class=\"token operator\">=</span> <span class=\"token string\">\"yumyum\"</span>\npuppy<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//yumyum</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">eat</code>이라는 단일 메소드가 있는 <code class=\"language-text\">dog</code>라는 객체 생성</li>\n<li><code class=\"language-text\">Object.create()</code>를 사용하여 <code class=\"language-text\">puppy</code>를 객체 상속</li>\n<li><code class=\"language-text\">this.eatFood</code>를 통해 출력되도록 문자열 설정</li>\n<li>새롭게 생성된 객체인 <code class=\"language-text\">puppy</code>를 사용하여 <code class=\"language-text\">eat</code>함수 호출</li>\n</ol>\n<br>\n<h2>생성자 new()</h2>\n<p>생성자를 통해 객체를 만들게 되면 생성자 함수의 프로토타입이 생성된 객체의 <strong>프로토타입 체인</strong>으로 연결된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eatFood <span class=\"token operator\">=</span> <span class=\"token string\">\"yumyum\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eatFood<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> puppy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npuppy<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//yumyum</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">Dog</code> 생성자 생성</li>\n<li><code class=\"language-text\">Dog</code> 생성자의 prototype에 <code class=\"language-text\">eat</code>이라는 메소드 추가</li>\n<li><code class=\"language-text\">Dog</code> 생성자 함수를 통해 <code class=\"language-text\">puppy</code> 객체 생성</li>\n<li><code class=\"language-text\">puppy</code>는 proto를 통해 <code class=\"language-text\">Dog</code>의 prototype <code class=\"language-text\">eat</code>메소드 사용</li>\n</ol>\n<p><br><br></p>\n<p>두 방법 중 생성자를 이용한 방법은 피해야한다.<br>\nproto를 직접 접근하여 프로토타입 체인을 만들었기 때문이다.\n그러므로 <strong>Object.create()</strong>를 활용하자!!!!!</p>\n<p><br><br><br><br><br></p>\n<blockquote>\n<p><subtitle> conference</p>\n</blockquote>\n<ul>\n<li><a href=\"http://tcpschool.com/javascript/js_object_prototype\">http://tcpschool.com/javascript/js_object_prototype</a></li>\n<li><a href=\"https://simplejs.gitbook.io/olaf/08.-prototype\">https://simplejs.gitbook.io/olaf/08.-prototype</a></li>\n<li><a href=\"https://helloworldjavascript.net/pages/180-object.html#fn_3\">https://helloworldjavascript.net/pages/180-object.html#fn_3</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 - 객체(Object) 프로토타입","date":"2019-12-10","image":null},"id":"01ccffae-5ae3-55d0-93dc-44e086500911"}},"pageContext":{"slug":"/posts/2019-12-10-object-3/"}}}