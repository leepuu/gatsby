{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/Blog/2020-02-10-web-4/","result":{"data":{"markdownRemark":{"html":"<h1>1. API (Application Programming Interface)?</h1>\n<p>응용프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을<br>\n제어할 수 있게 만든 인터페이스<br>\n즉, 프로그램들이 서로 상호작용하는 것을 도와주는 매개체이다.<br>\n→ 간소화되고 빠른 프로세스 처리가 가능하게 된다.</p>\n<p><br><br><br></p>\n<h1>2. REST (Representational State Transfer)?</h1>\n<p>자원(이미지, 동영상, DB)을 이름(URI)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것</p>\n<br>\n<blockquote>\n<p><subtitle> REST API? </subtitle><br>\nREST 기반으로 서비스 API를 구현한 것</p>\n</blockquote>\n<p><br><br><br></p>\n<h1>3. REST 구성 요소</h1>\n<h2>1. 자원(Resource) : URI</h2>\n<p>모든 자원을 구별하는 ID(HTTP URI)가 존재하고, 이 자원은 server에 존재한다.<br>\n클라이언트는 URI를 이용해서 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 server에 요청한다.</p>\n<br>\n<h2>2. 행위(Verb) : HTTP Method</h2>\n<p>HTTP 프로토콜의 Method를 사용하는데 GET, POST, PUT, DELET 메소드를 제공한다.</p>\n<br>\n<h2>3. 표현(Representations)</h2>\n<p>클라이언트가 자원의 상태(정보)에 대한 조작을 요청하면 server는 이에 적절한 응답을 보낸다.<br>\nREST에서 하나의 자원은 JSON, XML, TEST, RSS등 여러 형태인데 그 중 <strong>JSON, XML</strong>이 일반적으로 쓰인다.</p>\n<p><br><br><br></p>\n<h1>4. REST 특징</h1>\n<h2>1. Server-Client (서버 - 클라이언트 구조)</h2>\n<p>자원이 있는 쪽이 Server, 자원을 요청하는 쪽이 Client로 서로간의 의존성이 줄어들어 <strong>역할이 분명</strong>하다.</p>\n<br>\n<h2>2. Stateless (무상태성)</h2>\n<p>HTTP특성인 작업을 위한 상태정보를 따로 저장하고 관리하지 않는다.<br>\n즉, 상태정보를 유지하지 않는다는 의미로 들어오는 <strong>요청만 단순히 처리</strong>한다.</p>\n<br>\n<h2>3. Cacheable (캐시처리기능)</h2>\n<p>HTTP 인프라를 그대로 활용가능하기 때문에 <strong>캐싱기능</strong>이 적용 가능하다.</p>\n<br>\n<h2>4. Self-descriptiveness (자체 표현 구조)</h2>\n<p>REST API 메세지만 보고 <strong>쉽게 이해 가능</strong>하다.</p>\n<br>\n<h2>5. Layered System (계층화)</h2>\n<p>REST Server은 다중계층으로 구성될 수 있으며, PROXY, 게이트웨이 같은 <strong>네트워크 기반의 중간매체를 사용</strong>할 수 있다.</p>\n<br>\n<h2>6. Uniform Interface (인터페이스 일관성)</h2>\n<p><strong>HTTP 표준 프로토콜에 따르는 모든 플랫폼</strong>에서 사용 가능하다.</p>\n<p><br><br><br></p>\n<h1>5. REST 설계 기본 규칙</h1>\n<h2>1. URT는 정보 자원을 표현해야 한다.</h2>\n<h3>1. 동사보다는 명사를, 대문자보다는 소문자를 사용한다.</h3>\n<pre><code class=\"language-javascript\">//Bad                   //Good\nGET / Uesr / 1-- > GET / user / 1\n</code></pre>\n<br>\n<h3>2. 슬래시(/)는 계층관계를 나타내는데 URI 마지막은 사용하지 않는다.</h3>\n<pre><code class=\"language-javascript\">//Bad                       //Good\nhttp://testapi.com/uesr/    -->     http://testapi.com/uesr\n</code></pre>\n<br>\n<h3>3. 밑줄(_) 대신 하이픈(-)은 URI의 가독성을 높이는데 사용한다.</h3>\n<pre><code class=\"language-javascript\">//Bad                           //Good\nhttp://testapi.com/uesr_api     -->     http://testapi.com/uesr-api\n</code></pre>\n<br>\n<h3>4. 파일 확장자는 URI에 사용하지 않는다. (Accept header 사용)</h3>\n<pre><code class=\"language-javascript\">//Bad\nhttp://testapi.com/uesr.jpg\n\n//Good\nGET /uesr HTTP/1.1 Host: restapi.example.com Accept: image/jpg\n</code></pre>\n<p><br><br><br></p>\n<h1>6. RESTful?</h1>\n<p>REST라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어로,<br>\n'REST API'를 제공하는 웹 서비스를 'RESTful'하다고 할 수 있다.</p>\n<p><br><br><br></p>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li><a href=\"http://blog.wishket.com/api%EB%9E%80-%EC%89%BD%EA%B2%8C-%EC%84%A4%EB%AA%85-%EA%B7%B8%EB%A6%B0%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8/\">http://blog.wishket.com/api%EB%9E%80-%EC%89%BD%EA%B2%8C-%EC%84%A4%EB%AA%85-%EA%B7%B8%EB%A6%B0%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8/</a></li>\n<li><a href=\"https://junsday.tistory.com/40\">https://junsday.tistory.com/40</a></li>\n<li><a href=\"https://ibrahimovic.tistory.com/21\">https://ibrahimovic.tistory.com/21</a></li>\n<li><a href=\"https://sanghaklee.tistory.com/57\">https://sanghaklee.tistory.com/57</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html\">https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html</a></li>\n</ul>","frontmatter":{"title":"Web - API와 REST API 이해하기"},"excerpt":"1. API (Application Programming Interface…"}},"pageContext":{"slug":"/posts/Blog/2020-02-10-web-4/"}}}