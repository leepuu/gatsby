{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/Blog/2020-01-09-regular-1/","result":{"data":{"markdownRemark":{"html":"<p>솔직히 정규표현식을 많이 접하긴 하지만 굳이 배워야하나?라는 생각을 많이 했다.<br>\n근데 알고리즘 문제를 풀며 다른 사람들 풀이를 보니 간단한 정규식은 많았고, 유용하게 쓰이는 것 같아<br>\n깊게는 아니지만 간단하게 공부하려고한다!</p>\n<br>\n<h1>1. 정규 표현식(Regular Expression)?</h1>\n<p>문자열에서 특정 패턴이나 문자를 찾아내는 일종의 언어(패턴)으로,<br>\n간단하게 이메일, 비밀번호 형식 검사라고 생각하면 된다.<br>\n정규 표현식은 크게 문자를 <strong>검색, 대체, 추출</strong>한다.</p>\n<p><br><br><br></p>\n<h1>2. 정규 표현식 방식</h1>\n<h2>생성자 함수 방식</h2>\n<p><code>RegExp</code> 생성자 함수를 호출하여 사용한다.<br>\n정규식의 패턴이 변경될 수 있는 경우, 사용자 입력과 같이 다른 출처로부터 패턴을 가져와야하는 경우에는 생성자함수를 사용해야한다.</p>\n<pre><code class=\"language-javascript\">const regexp1 = new RegExp(\"^abc\")\n// new RegExp(표현식)\n\nconst regexp2 = new RegExp(\"^abx\", \"gi\")\n// new RegExp(표현식, 플래그)\n</code></pre>\n<br>\n<h2>리터럴(Literal) 방식</h2>\n<p><code>/</code> 로 감싸진 패턴을 리터럴로 사용한다.<br>\n제일 많이 쓰이며, 정규식이 상수라면 이 방식이 성능을 향상시킬 수 있다.</p>\n<pre><code class=\"language-javascript\">const regexp1 = /^abc/\n// /표현식/\n\nconst regexp2 = /^abc/gi\n// /표현식/플래그\n</code></pre>\n<p><br><br><br></p>\n<h1>3. 정규 표현식 메소드</h1>\n<table>\n<thead>\n<tr>\n<th>메소드</th>\n<th>설명</th>\n<th>문법</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>exec</code></td>\n<td>일치하는 문자열을 배열로 반환</td>\n<td>정규식.exec(문자열)</td>\n</tr>\n<tr>\n<td><code>test</code></td>\n<td>일치하는 문자열이 있는지 true/false로 반환</td>\n<td>정규식.test(문자열)</td>\n</tr>\n<tr>\n<td><code>match</code></td>\n<td>일치하는 문자열을 배열로 반환</td>\n<td>문자열.match(정규식)</td>\n</tr>\n<tr>\n<td><code>search</code></td>\n<td>일치하는 문자열의 인덱스를 반환</td>\n<td>문자열.search(정규식)</td>\n</tr>\n<tr>\n<td><code>replace</code></td>\n<td>일치하는 문자열을 대체된 문자열로 반환</td>\n<td>문자열.replace(정규식, 대체문자)</td>\n</tr>\n<tr>\n<td><code>split</code></td>\n<td>일치하는 문자열을 기준으로 분활하여 배열로 반환</td>\n<td>문자열.split(정규식)</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">const str = \"Candy is sweet.\"\nconst regexr = /is/gi\n\n//RegExp 객체의 메소드\nregexr.exec(str) //[\"is\", index: 6, input: \"Candy is sweet.\"\nregexr.test(str) //true\n\n//String 객체의 메소드\nstr.match(regexr) //[\"is\"]\nstr.search(regexr) //6\nstr.replace(regexr, \"IS\") //Candy IS sweet.\nstr.split(regexr) //[\"Candy \", \" sweet.\"]\n</code></pre>\n<p><br><br><br></p>\n<h1>4. 정규 표현식 플래그</h1>\n<p>플래그는 정규 표현식의 조건을 추가하는 것으로 꼭 넣을 필요는 없다.</p>\n<table>\n<thead>\n<tr>\n<th>플래그</th>\n<th>의미</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>g</code></td>\n<td>Global</td>\n<td>전역 검색, 문자열 내 모든 패턴 검색</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td>Ignore Case</td>\n<td>영어 대소문자 구분 없이 검색</td>\n</tr>\n<tr>\n<td><code>m</code></td>\n<td>Multi Line</td>\n<td>여러 줄 검색, 문자열 행 구분 없이 검색</td>\n</tr>\n<tr>\n<td><code>u</code></td>\n<td>Unicode</td>\n<td>유니코드로 검색</td>\n</tr>\n</tbody>\n</table>\n<p><br><br><br></p>\n<h1>5. 정규 표현식 패턴</h1>\n<p>패턴은 검색하고 싶은 문자열을 설정하는 것으로, 외우지 않으면 쓸 수 없다.</p>\n<h2>앵커 문자</h2>\n<p>앵커 문자는 문자열의 앞과 뒤를 구분해주는 정규 표현식 기호이다.</p>\n<table>\n<thead>\n<tr>\n<th>기호</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>^</strong> ABC</td>\n<td>맨 앞 문자가 ABC</td>\n</tr>\n<tr>\n<td>ABC <strong>$</strong></td>\n<td>맨 뒤 문자가 ABC</td>\n</tr>\n</tbody>\n</table>\n<br>\n## 메타 문자\n자바스크립트의 정규 표현식 객체가 갖는 가장 유용한 기능이다.\n<table>\n<thead>\n<tr>\n<th>기호</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>아무 글자</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>괄호 안의 글자</td>\n</tr>\n<tr>\n<td><sup id=\"fnref-abc\"><a href=\"#fn-abc\" class=\"footnote-ref\">abc</a></sup></td>\n<td>괄호 안의 글자 제외</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>알파벳 a부터 z까지</td>\n</tr>\n<tr>\n<td>[A-Z]</td>\n<td>알파벳 A부터 Z까지</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>숫자 0부터 9까지</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>숫자</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>아무 단어(숫자)</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>공백 문자(탭, 띄어쓰기, 개행)</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>숫자 아님</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>아무 단어 아님</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>공백 문자 아님</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>수량 문자</h2>\n<table>\n<thead>\n<tr>\n<th>기호</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a <strong>+</strong></td>\n<td>a가 적어도 1개 이상</td>\n</tr>\n<tr>\n<td>a <strong>*</strong></td>\n<td>a가 0개 또는 여러 개</td>\n</tr>\n<tr>\n<td>a <strong>?</strong></td>\n<td>a가 0개 또는 1개</td>\n</tr>\n<tr>\n<td>a <strong>{5}</strong></td>\n<td>a가 5개</td>\n</tr>\n<tr>\n<td>a <strong>{2, 5}</strong></td>\n<td>a가 2개 ~ 5개</td>\n</tr>\n<tr>\n<td>a <strong>{2,}</strong></td>\n<td>a가 2개 이상</td>\n</tr>\n<tr>\n<td>a <strong>{,2}</strong></td>\n<td>a가 2개 이하</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>선택 문자</h2>\n<table>\n<thead>\n<tr>\n<th>기호</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ab <code>|</code> cd</td>\n<td>ab또는 cd를 선택</td>\n</tr>\n</tbody>\n</table>\n<p><br><br><br><br><br></p>\n<blockquote>\n<p><subtitle> refernece</p>\n</blockquote>\n<ul>\n<li><a href=\"https://heropy.blog/2018/10/28/regexp/\">https://heropy.blog/2018/10/28/regexp/</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D</a></li>\n</ul>","frontmatter":{"title":"자바스크립트 - 정규 표현식 이해하기"},"excerpt":"솔직히 정규표현식을 많이 접하긴 하지만 굳이 배워야하나?라는 생각을 많이 했다. 근데 알고리즘 문제를 풀며 다른 사람들 풀이를 보니 간단한 정규식은 많았고, 유용하게 쓰이는 것 같아 깊게는 아니지만 간단하게 공부하려고한다!…"}},"pageContext":{"slug":"/posts/Blog/2020-01-09-regular-1/"}}}