{"componentChunkName":"component---src-templates-post-view-js","path":"/posts/Blog/2020-01-15-algorithm-26/","result":{"data":{"markdownRemark":{"html":"<h4>문제설명</h4>\n<p>문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.\n<br></p>\n<h4>제한사항</h4>\n<ul>\n<li>문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.</li>\n<li>첫 번째 글자는 0번째 인덱스로 보아 짝수번재 알파벳으로 처리해야 합니다.</li>\n</ul>\n<br>\n<h4>입출력 예</h4>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"try hello world\"</td>\n<td>\"TrY HeLlO WoRlD\"</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h4><strong>풀이</strong></h4>\n<pre><code class=\"language-javascript\">function solution(s) {\n    let answer = \"\"\n    let count = 0\n    let arr = []\n    s = s.split(\" \")\n\n    s.forEach((item) => {\n        count = 0\n        for (let i of item) {\n            i = count % 2 == 0 ? i.toUpperCase() : i.toLowerCase()\n            arr.push(i)\n            count++\n        }\n        arr.push(\" \")\n    })\n    arr.pop()\n    answer = arr.join(\"\")\n    return answer\n}\n</code></pre>\n<ol>\n<li><code>split</code>를 사용해 배열을 모두 나눠준다.</li>\n<li><code>forEach</code> 과 <code>for</code>문을 사용해 이중반복을 만들어 준다.</li>\n<li><code>count</code> 변수를 사용해 수를 세어주고 만약 짝수면 대문자로 아니면 소문자로 만들어준다.</li>\n<li><code>push</code>를 사용해 변수에 담아준 뒤 맨 뒷자리는 제거해준다.</li>\n<li>배열을 문자열로 만들어준다.</li>\n</ol>\n<br>\n<h4><strong>다른 사람 풀이 01</strong></h4>\n<pre><code class=\"language-javascript\">function toWeirdCase(s) {\n    return s.toUpperCase().replace(/(\\w)(\\w)/g, function (a) {\n        return a[0].toUpperCase() + a[1].toLowerCase()\n    })\n}\n</code></pre>\n<ol>\n<li>먼저 매개변수 <code>s</code>를 <code>toUpperCase</code>로 대문자를 만들어준다.</li>\n<li><code>replace</code> 메소드를 사용해 첫번째 문자는 대문자로 두번째 문자는 소문자로 반복해준다.\n<br></li>\n</ol>\n<h4><strong>배운점</strong></h4>\n<p>다른사람 풀이를 해석했지만..제대로 한지 잘 모르겠다..<br>\n근데 난 반복문을 이중으로 썼는데 훨씬 수월한 건 알겠다.<br>\n속도랑 효율성 모두 빠르겠지.. 왜 정규식을 알고도 활용을 못할까ㅠㅠ</p>\n<p><br><br><br><br><br></p>\n<blockquote>\n<p><subtitle>reference</subtitle></p>\n</blockquote>\n<ul>\n<li><a href=\"https://tutorial.djangogirls.org/ko\">https://tutorial.djangogirls.org/ko</a></li>\n<li><a href=\"http://blog.daum.net/_blog/BlogTypeView.do?blogid=0QtKg&#x26;articleno=28&#x26;categoryId=0&#x26;totalcnt=30\">http://blog.daum.net/_blog/BlogTypeView.do?blogid=0QtKg&#x26;articleno=28&#x26;categoryId=0&#x26;totalcnt=30</a></li>\n</ul>\n<p><br><br><br><br><br></p>","frontmatter":{"title":"알고리즘 - 이상한 문자 만들기","date":"2020-01-15"}}},"pageContext":{"slug":"/posts/Blog/2020-01-15-algorithm-26/"}}}