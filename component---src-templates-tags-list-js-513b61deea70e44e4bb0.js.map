{"version":3,"sources":["webpack:///./src/templates/tags-list.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","title","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,sFAyDeA,UAnDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACpBC,EAAQF,EAARE,IAD+B,EAETD,EAAKE,kBAA3BC,EAF+B,EAE/BA,MAAOC,EAFwB,EAExBA,WACTC,EAAeD,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,iBAAoEH,EAApE,IAEf,OACC,6BACC,4BAAKI,GACL,4BACEF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACLC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACC,wBAAIE,IAAKJ,GACR,kBAAC,OAAD,CAAMK,GAAIL,GAAOE,QASrB,kBAAC,OAAD,CAAMG,GAAG,SAAT,cA8BI,IAAMC,EAAS","file":"component---src-templates-tags-list-js-513b61deea70e44e4bb0.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n\tconst { tag } = pageContext\r\n\tconst { edges, totalCount } = data.allMarkdownRemark\r\n\tconst tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>{tagHeader}</h1>\r\n\t\t\t<ul>\r\n\t\t\t\t{edges.map(({ node }) => {\r\n\t\t\t\t\tconst { slug } = node.fields\r\n\t\t\t\t\tconst { title } = node.frontmatter\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={slug}>\r\n\t\t\t\t\t\t\t<Link to={slug}>{title}</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t\t{/*\r\n              This links to a page that does not yet exist.\r\n              You'll come back to it!\r\n            */}\r\n\t\t\t<Link to=\"/tags\">All tags</Link>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nTags.propTypes = {\r\n\tpageContext: PropTypes.shape({\r\n\t\ttag: PropTypes.string.isRequired,\r\n\t}),\r\n\tdata: PropTypes.shape({\r\n\t\tallMarkdownRemark: PropTypes.shape({\r\n\t\t\ttotalCount: PropTypes.number.isRequired,\r\n\t\t\tedges: PropTypes.arrayOf(\r\n\t\t\t\tPropTypes.shape({\r\n\t\t\t\t\tnode: PropTypes.shape({\r\n\t\t\t\t\t\tfrontmatter: PropTypes.shape({\r\n\t\t\t\t\t\t\ttitle: PropTypes.string.isRequired,\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tfields: PropTypes.shape({\r\n\t\t\t\t\t\t\tslug: PropTypes.string.isRequired,\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t}),\r\n\t\t\t\t}).isRequired\r\n\t\t\t),\r\n\t\t}),\r\n\t}),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n\tquery($tag: String) {\r\n\t\tallMarkdownRemark(limit: 2000, sort: { fields: [frontmatter___date], order: DESC }, filter: { frontmatter: { tags: { in: [$tag] } } }) {\r\n\t\t\ttotalCount\r\n\t\t\tedges {\r\n\t\t\t\tnode {\r\n\t\t\t\t\tfields {\r\n\t\t\t\t\t\tslug\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfrontmatter {\r\n\t\t\t\t\t\ttitle\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`\r\n"],"sourceRoot":""}